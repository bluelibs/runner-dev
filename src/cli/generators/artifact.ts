import fs from 'fs';
import fsp from 'fs/promises';
import path from 'path';
import { ArtifactKind, toCamelCase, toKebabCase, toPascalCase } from './common';
import {
  eventTemplate,
  resourceMiddlewareTemplate,
  resourceTemplate,
  tagTemplate,
  taskMiddlewareTemplate,
  taskTemplate,
} from './templates';

export type ArtifactArgs = {
  kind: Exclude<ArtifactKind, 'project'>;
  name: string;
  namespace: string;
  baseDir: string;
  dryRun?: boolean;
  addIndex?: boolean;
  explicitId?: string;
};

export async function scaffoldArtifact({
  kind,
  name,
  namespace,
  baseDir,
  dryRun = false,
  addIndex = false,
  explicitId,
}: ArtifactArgs): Promise<{
  filePath: string;
  id: string;
  relDir: string;
  exported: boolean;
  content?: string;
}> {
  const cwd = process.cwd();
  const kebab = toKebabCase(name);
  const camel = toCamelCase(name);
  const pascal = toPascalCase(name);

  const id =
    explicitId ||
    `${namespace}.${
      kind === 'resource'
        ? 'resources'
        : kind === 'task'
        ? 'tasks'
        : kind === 'event'
        ? 'events'
        : kind === 'tag'
        ? 'tags'
        : kind === 'taskMiddleware' || kind === 'resourceMiddleware'
        ? 'middleware'
        : kind
    }.${kebab}`;

  const relDir =
    kind === 'resource'
      ? path.join(baseDir, 'resources')
      : kind === 'task'
      ? path.join(baseDir, 'tasks')
      : kind === 'event'
      ? path.join(baseDir, 'events')
      : kind === 'tag'
      ? path.join(baseDir, 'tags')
      : kind === 'taskMiddleware'
      ? path.join(baseDir, 'middleware', 'task')
      : path.join(baseDir, 'middleware', 'resource');

  const filePath = path.join(cwd, relDir, `${kebab}.ts`);
  const header = `/**\n * Generated by runner-dev new ${kind} ${name}\n * - Namespace: ${namespace}\n * - File: ${path.relative(cwd, filePath)}\n */`;
  const content =
    kind === 'resource'
      ? resourceTemplate({ header, id, camel, pascal })
      : kind === 'task'
      ? taskTemplate({ header, id, camel, pascal })
      : kind === 'event'
      ? eventTemplate({ header, id, camel, pascal })
      : kind === 'tag'
      ? tagTemplate({ header, id, camel, pascal })
      : kind === 'taskMiddleware'
      ? taskMiddlewareTemplate({ header, id, camel, pascal })
      : resourceMiddlewareTemplate({ header, id, camel, pascal });

  if (dryRun) {
    return { filePath, id, relDir, exported: false, content };
  }

  await fsp.mkdir(path.dirname(filePath), { recursive: true });
  await fsp.writeFile(filePath, content, { encoding: 'utf8' });

  let exported = false;
  if (addIndex) {
    const indexPath = path.join(cwd, relDir, 'index.ts');
    const exportLine = `export * from './${kebab}';\n`;
    try {
      const existing = fs.existsSync(indexPath)
        ? await fsp.readFile(indexPath, 'utf8')
        : '';
      if (!existing.includes(exportLine)) {
        await fsp.appendFile(indexPath, exportLine, { encoding: 'utf8' });
      }
      exported = true;
    } catch {
      exported = false;
    }
  }

  return { filePath, id, relDir, exported };
}
