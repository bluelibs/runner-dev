import path from "path";
import { writeJson, writeFile, writeGitignore, ensureDir } from "./initUtils";
import * as templates from "./scaffold/templates";

type ScaffoldOptions = {
  projectName: string;
  targetDir: string;
};

export async function scaffold(opts: ScaffoldOptions): Promise<void> {
  const { targetDir, projectName } = opts;

  const pkg = {
    name: projectName,
    version: "0.1.0",
    private: true,
    type: "module",
    scripts: {
      dev: "tsx watch src/main.ts",
      start: "node --enable-source-maps dist/main.js",
      build: "tsc -p tsconfig.json",
      test: "jest",
      "test:watch": "jest --watch",
      "schema:sdl": "runner-dev schema sdl",
    },
    dependencies: {
      "@bluelibs/runner": "^4.0.0",
    },
    devDependencies: {
      "@bluelibs/runner-dev": "^4.0.0",
      typescript: "^5.6.3",
      tsx: "^4.19.2",
      jest: "^29.7.0",
      "ts-jest": "^29.1.1",
      "@types/jest": "^29.5.12",
    },
  } as const;

  const tsconfig = {
    compilerOptions: {
      target: "ESNext",
      module: "Node16",
      moduleResolution: "node16",
      strict: true,
      esModuleInterop: true,
      forceConsistentCasingInFileNames: true,
      declaration: true,
      outDir: "dist",
      rootDir: "src",
      skipLibCheck: true,
      resolveJsonModule: true,
      lib: ["ESNext"],
    },
    include: ["src"],
  } as const;

  const jestConfig = `/** @type {import('jest').Config} */
module.exports = {
  preset: 'ts-jest/presets/default-esm',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  moduleFileExtensions: ['ts', 'tsx', 'js'],
  extensionsToTreatAsEsm: ['.ts', '.tsx'],
  transform: {
    '^.+\\.(ts|tsx)$': [
      'ts-jest',
      {
        useESM: true,
        tsconfig: 'tsconfig.jest.json',
      },
    ],
  },
};
`;

  const tsconfigJest = {
    extends: "./tsconfig.json",
    compilerOptions: {
      module: "CommonJS",
      moduleResolution: "node",
      target: "ES2019",
      esModuleInterop: true,
      isolatedModules: false,
    },
    include: ["src/**/*.ts", "src/**/*.tsx"],
  } as const;

  const mainTs = `
import { run, resource } from '@bluelibs/runner';
import { dev } from '@bluelibs/runner-dev';

// Minimal Runner app using runner-dev's dev resource
const app = resource({
  id: 'app.${projectName}',
  register: [
    dev.with({ port: 1337 }),
  ],
});

run(app)
  .then(() => {
    // eslint-disable-next-line no-console
    console.log('Runner app started on http://localhost:1337');
  })
  .catch((err) => {
    // eslint-disable-next-line no-console
    console.error(err);
    process.exit(1);
  });
`;

  const exampleTest = `describe('smoke', () => {
  it('works', () => {
    expect(1 + 1).toBe(2);
  });
});
`;

  const readme = `# ${projectName}

Generated by \`runner-dev new\`.

## Quick start

1. Install dependencies:
   - npm install
2. Start the dev server:
   - npm run dev

The server starts on http://localhost:1337

- GraphQL endpoint: http://localhost:1337/graphql (how to query your guts and live telemetry)
- Voyager UI: http://localhost:1337/voyager (how the guts of your app look like)
- Project docs: http://localhost:1337/docs (beautiful docs with live telemetry and easy task and event dispatching)

## Scripts

- dev: Run with tsx watch (TypeScript ESM)
- build: Type-check and emit to dist
- start: Run built app
- test: Run Jest

## Useful CLI commands

These commands are available from \`@bluelibs/runner-dev\`:

- Query your API:
  - ENDPOINT=http://localhost:1337/graphql npx runner-dev query 'query { tasks { id } }' --format pretty
- Print the GraphQL schema SDL:
  - npx runner-dev schema sdl --endpoint http://localhost:1337/graphql

`;

  // Use template renderers
  await writeJson(
    path.join(targetDir, "package.json"),
    templates.packageJson(projectName)
  );
  await writeJson(path.join(targetDir, "tsconfig.json"), templates.tsconfig());
  await writeFile(
    path.join(targetDir, "jest.config.cjs"),
    templates.jestConfig()
  );
  await writeJson(
    path.join(targetDir, "tsconfig.jest.json"),
    templates.tsconfigJest()
  );

  await ensureDir(path.join(targetDir, "src"));
  await writeFile(
    path.join(targetDir, "src", "main.ts"),
    templates.mainTs(projectName)
  );
  await writeFile(
    path.join(targetDir, "src", "main.test.ts"),
    templates.mainTest()
  );
  await writeFile(
    path.join(targetDir, "README.md"),
    templates.readme(projectName)
  );
  await writeGitignore(targetDir);
}
