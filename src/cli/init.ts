import fs from "fs";
import fsp from "fs/promises";
import path from "path";

type ScaffoldOptions = {
  projectName: string;
  targetDir: string;
};

export async function main(argv: string[]): Promise<void> {
  const [, , , rawName] = argv;
  const projectName = (rawName || "my-runner-project").trim();
  if (!/^[a-zA-Z0-9_-]+$/.test(projectName)) {
    // eslint-disable-next-line no-console
    console.error(
      "Invalid project name. Use only letters, numbers, dashes and underscores."
    );
    process.exit(1);
  }

  const targetDir = path.resolve(process.cwd(), projectName);
  await ensureEmptyDir(targetDir);

  const options: ScaffoldOptions = { projectName, targetDir };
  await scaffold(options);

  // eslint-disable-next-line no-console
  console.log(`\nProject created in ${targetDir}.`);
  // eslint-disable-next-line no-console
  console.log("\nNext steps:");
  // eslint-disable-next-line no-console
  console.log(`  cd ${projectName}`);
  // eslint-disable-next-line no-console
  console.log("  npm install");
  // eslint-disable-next-line no-console
  console.log("  npm run dev");
}

async function ensureEmptyDir(dir: string): Promise<void> {
  if (fs.existsSync(dir)) {
    const entries = await fsp.readdir(dir);
    if (entries.length > 0) {
      // eslint-disable-next-line no-console
      console.error(
        `Target directory '${path.basename(
          dir
        )}' already exists and is not empty.`
      );
      process.exit(1);
    }
  } else {
    await fsp.mkdir(dir, { recursive: true });
  }
}

async function scaffold(opts: ScaffoldOptions): Promise<void> {
  const { targetDir, projectName } = opts;

  const pkg = {
    name: projectName,
    version: "0.1.0",
    private: true,
    type: "module",
    scripts: {
      dev: "ts-node-dev --respawn --transpile-only src/main.ts",
      start: "node dist/main.js",
      build: "tsc -p tsconfig.json",
      test: "jest",
      "test:watch": "jest --watch",
      "schema:sdl": "runner-dev schema sdl",
    },
    dependencies: {
      "@bluelibs/runner-dev": "latest",
      "@bluelibs/runner": "latest",
    },
    devDependencies: {
      typescript: "^5.6.3",
      "ts-node": "^10.9.2",
      "ts-node-dev": "^2.0.0",
      jest: "^29.7.0",
      "ts-jest": "^29.1.1",
      "@types/jest": "^29.5.12",
      "source-map-support": "^0.5.21",
    },
  } as const;

  const tsconfig = {
    compilerOptions: {
      target: "ES2022",
      module: "ES2022",
      moduleResolution: "node",
      strict: true,
      esModuleInterop: true,
      forceConsistentCasingInFileNames: true,
      declaration: true,
      outDir: "dist",
      rootDir: "src",
      skipLibCheck: true,
      resolveJsonModule: true,
      lib: ["ES2022"],
    },
    include: ["src"],
  } as const;

  const jestConfig = `/** @type {import('jest').Config} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  moduleFileExtensions: ['ts', 'tsx', 'js'],
};
`;

  const mainTs = `import 'source-map-support/register';

async function run(): Promise<void> {
  // TODO: Replace with your own Runner setup. For now, just log.
  // You can import and use runner resources/tasks here.
  // eslint-disable-next-line no-console
  console.log('Hello from ${projectName}!');
}

void run();
`;

  const exampleTest = `describe('smoke', () => {
  it('works', () => {
    expect(1 + 1).toBe(2);
  });
});
`;

  const readme = `# ${projectName}

Generated by runner-dev new.\n\n
## Scripts

- dev: Run with ts-node-dev
- build: Type-check and emit to dist
- start: Run built app
- test: Run Jest

`;

  await writeJson(path.join(targetDir, "package.json"), pkg);
  await writeJson(path.join(targetDir, "tsconfig.json"), tsconfig);
  await writeFile(path.join(targetDir, "jest.config.js"), jestConfig);

  await fsp.mkdir(path.join(targetDir, "src"), { recursive: true });
  await writeFile(path.join(targetDir, "src", "main.ts"), mainTs);
  await writeFile(path.join(targetDir, "src", "main.test.ts"), exampleTest);
  await writeFile(path.join(targetDir, "README.md"), readme);
  await writeGitignore(targetDir);
}

async function writeJson(filePath: string, data: unknown): Promise<void> {
  const content = JSON.stringify(data, null, 2) + "\n";
  await writeFile(filePath, content);
}

async function writeFile(filePath: string, content: string): Promise<void> {
  await fsp.writeFile(filePath, content, { encoding: "utf8" });
}

async function writeGitignore(targetDir: string): Promise<void> {
  const content = `node_modules\n.dist\ndist\n.env\n\n`;
  await writeFile(path.join(targetDir, ".gitignore"), content);
}
